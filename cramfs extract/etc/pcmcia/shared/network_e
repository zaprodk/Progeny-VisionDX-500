#! /bin/sh
#
# network 1.86 2002/07/03 06:44:01 (David Hinds)
#
# Initialize or shutdown a PCMCIA ethernet adapter
#
# This script should be invoked with two arguments.  The first is the
# action to be taken, either "start", "stop", or "restart".  The
# second is the network interface name.
#
# The script passes an extended device address to 'network.opts' in
# the ADDRESS variable, to retrieve device-specific configuration
# options.  The address format is "scheme,socket,instance,hwaddr"
# where "scheme" is the current PCMCIA device configuration scheme,
# "socket" is the socket number, "instance" is used to number multiple
# interfaces in a single socket, and "hwaddr" is the card's hardware
# ethernet address.
#

# Modified for uClinux from Lyubomir Cekov
#
# depends from: $SCRIPT_DIR/shared/shared_init
#               $SCRIPT_DIR/shared/get_result
#               $SCRIPT_DIR/shared/get_info
#               $SCRIPT_DIR/shared/is_true
#               $SCRIPT_DIR/shared/log
#               $SCRIPT_DIR/shared/dhcp_stop
#               $SCRIPT_DIR/shared/set_ip
#               $SCRIPT_DIR/shared/add_dns
#               $SCRIPT_DIR/shared/del_dns
#               $SCRIPT_DIR/shared/chk_simple
#               # $SCRIPT_DIR/shared/nfs_stop
#               $SCRIPT_DIR/network.opts
#               $SCRIPT_DIR/wireless
#               /bin/ifconfig
#               /bin/ifport
#               /bin/ifuser
#               # /bin/mount
#               /bin/grep
#               /bin/sed
#               /bin/pump or $SCRIPT_DIR/shared/bootp_start or 
#                            $SCRIPT_DIR/shared/dhcp_start
#
# returns: 0-success; 1-error


SCRIPT_DIR=/etc/pcmcia
export SCRIPT_DIR
SCRIPT_DBG=1
export SCRIPT_DBG


[ $SCRIPT_DBG -eq 1 ] && echo " "
[ $SCRIPT_DBG -eq 1 ] && echo " -> $SCRIPT_DIR/network ($*)"


$SCRIPT_DIR/shared/shared_init $0 $1 $2 $3
RET=$?
. $SCRIPT_DIR/shared/get_result
if [ $RET -ne 0 ] ; then
  [ $SCRIPT_DBG -eq 1 ] && echo " <- $SCRIPT_DIR/network (ret=1)"
  exit 1
fi


if [ $SCRIPT_DBG -eq 1 ] ; then
  echo "   ACTION = $ACTION"
  echo "   DEVICE = $DEVICE"
  echo "   NEW_SCHEME = $NEW_SCHEME"
fi


# Get device attributes
$SCRIPT_DIR/shared/get_info $0
RET=$?
. $SCRIPT_DIR/shared/get_result
if [ $RET -ne 0 ] ; then
  [ $SCRIPT_DBG -eq 1 ] && echo " <- $SCRIPT_DIR/network (ret=1)"
  exit 1
fi

#HWADDR=`/bin/ifconfig $DEVICE | /bin/sed -ne 's/.*\(..:..:..:..:..:..\).*/\1/p'`
HWADDR="unsupported"


if [ $SCRIPT_DBG -eq 1 ] ; then
  echo "   SCHEME=$SCHEME"
  echo "   STAB=$STAB"
  echo "   SOCKET=$SOCKET"
  echo "   CLASS=$CLASS"
  echo "   DRIVER=$DRIVER"
  echo "   INSTANCE=$INSTANCE"
  echo "   MAJOR=$MAJOR"
  echo "   MINOR=$MINOR"
  echo "   HWADDR=$HWADDR"
fi


# Load site-specific settings
ADDRESS="$SCHEME,$SOCKET,$INSTANCE,$HWADDR"
export ADDRESS
[ $SCRIPT_DBG -eq 1 ] && echo "   ADDRESS=$ADDRESS"


$SCRIPT_DIR/network.opts
RET=$?
. $SCRIPT_DIR/shared/get_result
if [ $RET -ne 0 ] ; then
  [ $SCRIPT_DBG -eq 1 ] && echo " <- $SCRIPT_DIR/network (ret=1)"
  exit 1
fi


if [ $SCRIPT_DBG -eq 1 ] ; then
  echo "   INFO = $INFO"
  echo "   IF_PORT = $IF_PORT"
  echo "   BOOTP = $BOOTP"
  echo "   DHCP = $DHCP"
  echo "   DHCP_HOSTNAME = $DHCP_HOSTNAME"
  echo "   IPADDR = $IPADDR"
  echo "   NETMASK = $NETMASK"
  echo "   NETWORK = $NETWORK"
  echo "   BROADCAST = $BROADCAST"
  echo "   GATEWAY = $GATEWAY"
  echo "   DOMAIN = $DOMAIN"
  echo "   SEARCH = $SEARCH"
  echo "   DNS_1 = $DNS_1"
  echo "   DNS_2 = $DNS_2"
  echo "   DNS_3 = $DNS_3"
  echo "   MOUNTS = $MOUNTS"
  echo "   MTU = $MTU"
  echo "   IPX_FRAME = $IPX_FRAME"
  echo "   IPX_NETNUM = $IPX_NETNUM"
  echo "   START_FN = $START_FN"
  echo "   STOP_FN = $STOP_FN"
  echo "   NO_CHECK = $NO_CHECK"
  echo "   NO_FUSER = $NO_FUSER"
fi


RESOLV=/etc/resolv.conf
[ $SCRIPT_DBG -eq 1 ] && echo "   RESOLV = $RESOLV"


# Now, run the specific script for Wireless LAN interfaces
# Note : we need the wireless parameters to be set up before IP parameters,
# so that we can perform DHCP over the Wireless link if needed. Jean II
O_INFO=$INFO ; INFO=

if [ $SCRIPT_DBG -eq 1 ] ; then
  echo "   O_INFO = $O_INFO"
  echo "   INFO = $INFO"
fi


$SCRIPT_DIR/wireless $0
RET=$?
. $SCRIPT_DIR/shared/get_result
if [ $RET -ne 0 ] ; then
  [ $SCRIPT_DBG -eq 1 ] && echo " <- $SCRIPT_DIR/network (ret=1)"
  exit 1
fi


INFO=$O_INFO
[ $SCRIPT_DBG -eq 1 ] && echo "   INFO = $INFO"


RET=0
[ $SCRIPT_DBG -eq 1 ] && echo "   ACTION = $ACTION"
case ${ACTION} in
  "start")
     [ -n "$VERBOSE" -a -n "$INFO" ] && echo "$INFO"

     [ $SCRIPT_DBG -eq 1 ] && [ -n "$IF_PORT" ] && echo "   > IF_PORT part"
     [ -n "$IF_PORT" ] && /bin/ifport $DEVICE $IF_PORT

     if $SCRIPT_DIR/shared/is_true $PUMP ; then
       $SCRIPT_DIR/shared/log "/bin/pump -i $DEVICE > /dev/null"
       RET=$?

     elif $SCRIPT_DIR/shared/is_true $BOOTP ; then
       $SCRIPT_DIR/shared/bootp_start
       RET=$?
       . $SCRIPT_DIR/shared/get_result

     elif $SCRIPT_DIR/shared/is_true $DHCP ; then
       $SCRIPT_DIR/shared/dhcp_start
       RET=$?

     fi

     if [ $RET -ne 0 ] ; then
       [ $SCRIPT_DBG -eq 1 ] && echo " <- $SCRIPT_DIR/network (ret=$RET)"
       exit $RET
     fi


     if [ -n "$IPADDR" ] ; then
       $SCRIPT_DIR/shared/set_ip
       RET=$?
     fi
    
     # Update DNS stuff
     if [ -n "$DOMAIN$SEARCH$DNSSRVS$DNS_1$DNS_2$DNS_3" ] ; then
       $SCRIPT_DIR/shared/add_dns
       RET=$?
     fi

#     # Handle NFS mounts
#     if [ -n "$MOUNTS" ] ; then
#       for MT in $MOUNTS ; do log mount -v $MT ; done
#     fi
#
#     if [ -n "$IPX_NETNUM" ] ; then
#       log ipx_interface add $DEVICE $IPX_FRAME $IPX_NETNUM
#     fi

     $START_FN $DEVICE
     ;;


"stop")

     $STOP_FN $DEVICE

     if $SCRIPT_DIR/shared/is_true $PUMP  || \
        $SCRIPT_DIR/shared/is_true $BOOTP || \
        $SCRIPT_DIR/shared/is_true $DHCP  || \
        [ -n "$IPADDR" ] ; then

#      # Shut down all NFS mounts on this interface
#      nfsstop ()  ->>> Create new file $SCRIPT_DIR/shared/nfs_stop
#      {
#        local HOST MT
#        if read HOST MT ; then
#          $SCRIPT_DIR/shared/nfs_stop
#          if /bin/ifuser $DEVICE $HOST ; then
#            $SCRIPT_DIR/shared/do_fuser -k -m $MT > /dev/null
#            $SCRIPT_DIR/shared/log /bin/umount -f -v $MT
#          fi
#        fi
#      }
#      /bin/mount -t nfs | sed -e 's/:.* on \(.*\) type .*/ \1/' | 
#          $SCRIPT_DIR/shared/nfs_stop

#      [ -n "$IPX_NETNUM" ] && ipx_interface del $DEVICE $IPX_FRAME

       if $SCRIPT_DIR/shared/is_true $PUMP ; then
         $SCRIPT_DIR/shared/log /bin/pump -r -i $DEVICE

       elif $SCRIPT_DIR/shared/is_true $DHCP ; then
         $SCRIPT_DIR/shared/dhcp_start
         RET=$?
         
       fi
     fi

     # Remove nameservers
       $SCRIPT_DIR/shared/del_dns
       RET=$?

     $SCRIPT_DIR/shared/log /bin/ifconfig $DEVICE down
     ;;


"check")
     if $SCRIPT_DIR/shared/is_true $NO_CHECK ; then
       [ $SCRIPT_DBG -eq 1 ] && echo " <- $SCRIPT_DIR/network (ret=0)"
       exit 0
     fi

     /bin/ifconfig $DEVICE | /bin/grep -q RUNNING
     if [ $? -ne 0 ] ; then
       [ $SCRIPT_DBG -eq 1 ] && echo " <- $SCRIPT_DIR/network (ret=0)"
       exit 0
     fi

#    # Check for any in-use NFS mounts
#    nfscheck ()
#    {
#	while read HOST MT ; do
#	    /bin/ifuser $DEVICE $HOST && do_fuser -sm $MT && exit 1
#	done
#   }
#    mount -t nfs | sed -e 's/:.* on \(.*\) type .*/ \1/' | nfscheck

#    # Check for active TCP or UDP connections
#    getdests ()
#    {
#    	IFS=" :" ; read A ; read A
#	while read A B C D E HOST PORT STATE ; do
#	    if [ "$STATE" != "FIN_WAIT1" -a "$STATE" != "FIN_WAIT2" \
#		-a "$STATE" != "CLOSE_WAIT" -a "$STATE" != "TIME_WAIT" \
#		-a "$HOST" != "127.0.0.1" -a "$HOST" != "0.0.0.0" \
#		-a "$STATE" != "CLOSE" -a "$PORT" != "*" ] ; then\
#		echo $HOST
#	    fi
#	done
#    }
#    DESTS=`netstat -ntuw | getdests`

     /bin/ifuser $DEVICE $DESTS
     if [ $? -eq 0 ] ; then
       [ $SCRIPT_DBG -eq 1 ] && echo " <- $SCRIPT_DIR/network (ret=1)"
       exit 1
     fi
     ;;


"cksum")
     if [ $WIRELESS = 1 ] ; then
       [ $SCRIPT_DBG -eq 1 ] && echo " <- $SCRIPT_DIR/network (ret=1)"
       exit 1
     fi

     $SCRIPT_DIR/shared/chk_simple "$NEW_SCHEME,$SOCKET,$INSTANCE,$HWADDR"
     if [ $? -ne 0 ] ; then
       [ $SCRIPT_DBG -eq 1 ] && echo " <- $SCRIPT_DIR/network (ret=1)"
       exit 1
     fi
     ;;


"restart")
     [ -n "$IPADDR" ] && /bin/ifconfig $DEVICE down up
     ;;


"suspend"|"resume")
     ;;


*)
     $SCRIPT_DIR/shared/usage $0
     ;;

esac


[ $SCRIPT_DBG -eq 1 ] && echo " <- $SCRIPT_DIR/network (ret=0)"
exit 0
